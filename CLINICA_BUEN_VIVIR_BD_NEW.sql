CREATE DATABASE CLINICA_ANTHONYRV_BD --Creamos la base de datos
GO
USE CLINICA_ANTHONYRV_BD
GO

--CREAMOS LAS TABLAS 
--************************************************************************
--Creamos la tabla PACIENTE
CREATE TABLE PACIENTES(
	ID_PACIENTE INT IDENTITY PRIMARY KEY,
	NOMBRE_PACIENTE VARCHAR(30),
	APELLIDO1 VARCHAR(20),
	APELLIDO2 VARCHAR(20),
	CEDULA VARCHAR(20),
	TELEFONO VARCHAR(20),
	CORREO VARCHAR(30)
);

--Creamos la tabla ESPECIALIDADES
CREATE TABLE ESPECIALIDADES(
	ID_ESPECIALIDAD INT IDENTITY  PRIMARY KEY,
	NOMBRE_ESPECIALIDAD VARCHAR(30)
);

--Creamos la tabla MEDICOS_ESPECIALISTAS
CREATE TABLE MEDICOS_ESPECIALISTAS(
	ID_MEDICO INT IDENTITY  PRIMARY KEY,
	ID_ESPECIALIDAD INT,--Llave foranea
	NOMBRE_MEDICO VARCHAR(20),
	APELLIDO1 VARCHAR(20),
	APELLIDO2 VARCHAR(20),
	CEDULA VARCHAR(20),
	TELEFONO VARCHAR(20),
	CORREO VARCHAR(30),
	EXPERIENCIA INT
);

--Creamos la tabla administradores que en este caso seria lo mismo que funcionarios
CREATE TABLE ADMINISTRADORES(
	ID_ADMINISTRADOR INT IDENTITY  PRIMARY KEY,
	NOMBRE_ADMINISTRADOR VARCHAR(20),
	PUESTO_LABORAL VARCHAR(30),
	APELLIDO1 VARCHAR(20),
	APELLIDO2 VARCHAR(20),
	CEDULA VARCHAR(20),
	TELEFONO VARCHAR(20),
	CORREO VARCHAR(30)
);

--Creamos la tabla pagos
CREATE TABLE PAGOS(
	NUM_FACTURA INT IDENTITY PRIMARY KEY,
	ID_PACIENTE INT,--Llave foranea
	ID_ADMINISTRADOR INT,--Llave foranea
	TOTAL_A_PAGAR DECIMAL(10,2),
	DESCRIPCION_PAGO VARCHAR(150)
);

--Creamos la tabla agenda_medicos
CREATE TABLE AGENDA_MEDICOS(
	ID_AGENDA INT IDENTITY  PRIMARY KEY,
	ID_MEDICO INT,--Llave foranea
	FECHA_HORA DATETIME,
	DISPONIBILIDAD VARCHAR(20)
);

--Creamos la tabla citas
CREATE TABLE CITAS(
	ID_CITA INT IDENTITY  PRIMARY KEY,
	ID_AGENDA INT,--Llave foranea
	ID_PACIENTE INT,--Llave foranea
);

CREATE TABLE CITAS_WEB(
	ID_CITA INT IDENTITY  PRIMARY KEY,
	ID_AGENDA INT,--Llave foranea
	ID_PACIENTE INT,--Llave foranea
	HORARIO TIME
);

--Creamos la tabla medicamentos
CREATE TABLE MEDICAMENTOS(
	ID_MEDICAMENTO INT IDENTITY  PRIMARY KEY,
	NOMBRE_MEDICAMENTO VARCHAR(30),
	CANTIDAD INT,
	DESCRIPCION VARCHAR(150)
);

--Creamos la tabla medicamentos
CREATE TABLE DIAGNOSTICOS(
	ID_DIAGNOSTICO INT IDENTITY  PRIMARY KEY,
	ID_MEDICAMENTO INT,--Llave foranea
	ID_CITA INT,--Llave foranea
	ID_MEDICO INT,--Llave foranea
	DESCRIPCION VARCHAR(150)
);

--Creamos la tabla historial 
CREATE TABLE HISTORIAL_PACIENTE(
	ID_HISTORIAL INT IDENTITY  PRIMARY KEY,
	ID_PACIENTE INT,--Llave foranea
	ID_DIAGNOSTICO INT--Llave foranea
);

--Creamos la tabla bitacora(Esta tabla registrara los movimientos de los usuarios por ende no estara conectada a nada)
CREATE TABLE BITACORA(
	ID_MOVIMIENTO INT IDENTITY  PRIMARY KEY,
	FECHA_MOVIMIENTO DATETIME,
	DESCRIPCION_MOVIMIENTO VARCHAR(150)
);

--Creamos la tabla agenda_web
CREATE TABLE AGENDA_WEB(
	ID_AGENDA INT IDENTITY  PRIMARY KEY,
	ID_MEDICO INT,--Llave foranea
	HORA_INICIO DATETIME,
	HORA_FIN DATETIME,
	ID_ESPECIALIDAD INT--Llave foranea
);

--************************************************************************
--CREAMOS LAS RELACIONES EN LAS TABLAS
ALTER TABLE CITAS_WEB--Llave foranea
	ADD CONSTRAINT FK_ID_PACIENTE_CITAS_WEB FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTES(ID_PACIENTE)

ALTER TABLE CITAS_WEB--Llave foranea
	ADD CONSTRAINT FK_AGENDA_CITAS_WEB FOREIGN KEY(ID_AGENDA) REFERENCES AGENDA_WEB(ID_AGENDA)

ALTER TABLE MEDICOS_ESPECIALISTAS --Le agregamos la llave foreana
	ADD CONSTRAINT FK_ID_ESPECIALIDAD FOREIGN KEY(ID_ESPECIALIDAD) REFERENCES ESPECIALIDADES(ID_ESPECIALIDAD)

ALTER TABLE PAGOS --Le agregamos la llave foreana
	ADD CONSTRAINT FK_ID_PACIENTE FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTES(ID_PACIENTE)

ALTER TABLE PAGOS --Le agregamos la llave foreana
	ADD CONSTRAINT FK_ID_ADMINISTRADOR FOREIGN KEY(ID_ADMINISTRADOR) REFERENCES ADMINISTRADORES(ID_ADMINISTRADOR)

ALTER TABLE AGENDA_MEDICOS--Le agregamos llave foranea
	ADD CONSTRAINT FK_ID_MEDICO_AGENDA FOREIGN KEY(ID_MEDICO) REFERENCES MEDICOS_ESPECIALISTAS(ID_MEDICO)

ALTER TABLE AGENDA_WEB--Le agregamos llave foranea
	ADD CONSTRAINT FK_ID_MEDICO_AGENDA_WEB FOREIGN KEY(ID_MEDICO) REFERENCES MEDICOS_ESPECIALISTAS(ID_MEDICO)

ALTER TABLE AGENDA_WEB--Le agregamos llave foranea
	ADD CONSTRAINT FK_ID_ESPECIALIDAD_WEB FOREIGN KEY(ID_ESPECIALIDAD) REFERENCES ESPECIALIDADES(ID_ESPECIALIDAD)

ALTER TABLE CITAS--Llave foranea
	ADD CONSTRAINT FK_AGENDA_CITAS FOREIGN KEY(ID_AGENDA) REFERENCES AGENDA_MEDICOS(ID_AGENDA)

ALTER TABLE CITAS--Llave foranea
	ADD CONSTRAINT FK_ID_PACIENTE_CITAS FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTES(ID_PACIENTE)

ALTER TABLE DIAGNOSTICOS--Llave foranea
	ADD CONSTRAINT FK_MEDICO_DIAGNOSTICO FOREIGN KEY(ID_MEDICO) REFERENCES MEDICOS_ESPECIALISTAS(ID_MEDICO)

ALTER TABLE DIAGNOSTICOS--Llave foranea
	ADD CONSTRAINT FK_CITA_DIAGNOSTICO FOREIGN KEY(ID_CITA) REFERENCES CITAS(ID_CITA)

ALTER TABLE DIAGNOSTICOS--Llave foranea
	ADD CONSTRAINT FK_MEDICAMENTO_DIAGNOSTICO FOREIGN KEY(ID_MEDICAMENTO) REFERENCES MEDICAMENTOS(ID_MEDICAMENTO)

ALTER TABLE HISTORIAL_PACIENTE--Llave foranea
	ADD CONSTRAINT FK_PACIENTE_HISTORIAL FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTES(ID_PACIENTE)

ALTER TABLE HISTORIAL_PACIENTE--Llave foranea
	ADD CONSTRAINT FK_DIAGNOSTICO_HISTORIAL FOREIGN KEY(ID_DIAGNOSTICO) REFERENCES DIAGNOSTICOS(ID_DIAGNOSTICO)

--************************************************************************
--CREAMOS EL PROCEDIMIENTO ALMACENADO QUE PERMITA VALIDAR LOS HORARIOS Y DISPONIBILIDAD CON LA AGENDA
GO
CREATE PROCEDURE InsertarCita
    @ID_AGENDA INT,
    @ID_PACIENTE INT,
    @HORARIO DATETIME,
    @MENSAJE VARCHAR(100) OUTPUT
AS
BEGIN
    -- Calcular la hora de fin de la cita sumando 30 minutos
    DECLARE @HORA_FIN DATETIME
    SET @HORA_FIN = DATEADD(MINUTE, 30, @HORARIO)

    -- Verificar si hay choque de horarios o cita dentro del rango
    IF EXISTS (
        SELECT 1
        FROM CITAS_WEB cw
        WHERE cw.ID_AGENDA = @ID_AGENDA
          AND (
            (CONVERT(TIME, @HORARIO) >= CONVERT(TIME, cw.HORARIO) AND CONVERT(TIME, @HORARIO) < DATEADD(MINUTE, 30, CONVERT(TIME, cw.HORARIO)))) -- Choque de horarios
            OR (CONVERT(TIME, cw.HORARIO) >= CONVERT(TIME, @HORARIO) AND CONVERT(TIME, cw.HORARIO) < CONVERT(TIME, @HORA_FIN)) -- Cita dentro del rango
    )
    BEGIN
        -- Hay choque de horarios o cita dentro del rango, no se permite la inserción
        SET @MENSAJE = 'No se puede agendar la cita debido a que ya existe una en ese horario'
        RETURN 0
    END

    -- Obtener la hora de inicio y fin de la agenda
    DECLARE @HORA_INICIO_AGENDA TIME
    DECLARE @HORA_FIN_AGENDA TIME
    SELECT @HORA_INICIO_AGENDA = CAST(HORA_INICIO AS TIME), @HORA_FIN_AGENDA = CAST(HORA_FIN AS TIME)
    FROM AGENDA_WEB
    WHERE ID_AGENDA = @ID_AGENDA

    -- Verificar si la cita está dentro del rango de la agenda
    IF CONVERT(TIME, @HORARIO) < @HORA_INICIO_AGENDA OR CONVERT(TIME, @HORA_FIN) > @HORA_FIN_AGENDA
    BEGIN
        -- La cita está fuera del rango de la agenda, no se permite la inserción
        SET @MENSAJE = 'No se puede agendar la cita debido a que está fuera del rango de la agenda'
        RETURN 0
    END

    -- No hay choque de horarios ni está fuera del rango de la agenda, se permite la inserción
    INSERT INTO CITAS_WEB (ID_AGENDA, ID_PACIENTE, HORARIO)
    VALUES (@ID_AGENDA, @ID_PACIENTE, @HORARIO)

    SET @MENSAJE = 'Se agendó la cita correctamente'
    RETURN 1
END
GO
--************************************************************************
--CREAMOS EL PROCEDIMIENTO ALMACENADO QUE PERMITA ELIMINAR UN PACIENTE SOLO SI NO CUENTA CON CITAS ACTUALMENTE}
GO
CREATE PROCEDURE BorrarPaciente (
    @IDPaciente INT,
	@MENSAJE VARCHAR(100) OUTPUT
)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM CITAS_WEB WHERE ID_PACIENTE = @IDPaciente)
    BEGIN
        DELETE FROM PACIENTES WHERE ID_PACIENTE = @IDPaciente;
        SET @MENSAJE = 'Se elimino el paciente correctamente'
		RETURN 1
    END
    ELSE
    BEGIN
		  SET @MENSAJE = 'No se puede eliminar el paciente porque tiene citas programadas'
		RETURN 0
    END
END;
GO
--************************************************************************
--CREAMOS EL PROCEDIMIENTO ALMACENADO QUE PERMITA INSERTAR UN PACIENTE SOLO SI SU CEDULA ES DIFERENTE A UNA YA EXISTENTE
GO
CREATE PROCEDURE InsertarPaciente (
    @NOMBRE VARCHAR(30),
    @APELLIDO1 VARCHAR(20),
    @APELLIDO2 VARCHAR(20),
    @CEDULA VARCHAR(20),
    @TELEFONO VARCHAR(20),
    @CORREO VARCHAR(30),
	@MENSAJE VARCHAR(100) OUTPUT
)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM PACIENTES WHERE CEDULA = @CEDULA)
    BEGIN
        INSERT INTO PACIENTES (NOMBRE_PACIENTE, APELLIDO1, APELLIDO2, CEDULA, TELEFONO, CORREO)
        VALUES (@NOMBRE, @APELLIDO1, @APELLIDO2, @CEDULA, @TELEFONO, @CORREO);
        SET @MENSAJE = 'Paciente insertado correctamente'
		RETURN 1
    END
    ELSE
    BEGIN
        SET @MENSAJE = 'No se puede insertar el paciente porque su numero de cedula ya existe actualmente en la base de datos'
        RETURN 0
    END
END;
GO

